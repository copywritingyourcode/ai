

### File: analyzer.py (Part 1/2) ###

"""
Code analyzer module for static analysis and code quality checking.

This module provides functionality to analyze code for potential issues,
evaluate code quality, and suggest improvements.
"""

import logging
import subprocess
import os
import tempfile
import json
from pathlib import Path
from typing import Dict, List, Optional, Union, Any, Set, Tuple
import yaml
import re
import ast
import sys

# Logger for this module
logger = logging.getLogger(__name__)


class CodeAnalyzer:
    """
    Analyzes code for quality issues and potential bugs.
    
    This class provides methods to perform static analysis on code,
    identify common issues, and suggest improvements.
    """
    
    def __init__(self, config_path: Union[str, Path]):
        """
        Initialize the code analyzer.
        
        Args:
            config_path: Path to the configuration file
        """
        self.config_path = Path(config_path)
        
        # Load configuration
        with open(self.config_path, 'r') as f:
            self.config = yaml.safe_load(f)
        
        # Extract code analyzer settings
        analyzer_config = self.config['code_tools'].get('analyzer', {})
        
        # External analyzers settings
        self.external_analyzers = analyzer_config.get('external_analyzers', {})
        
        # Enable analyzers by default
        self.enable_analyzers = analyzer_config.get('enable_analyzers', True)
        
        logger.info(f"Code analyzer initialized, enabled: {self.enable_analyzers}")
    
    def analyze_code(
        self, 
        code: str,
        language: str,
        filename: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Analyze code for issues and quality.
        
        Args:
            code: Code to analyze
            language: Programming language of the code
            filename: Optional filename for context
            
        Returns:
            Dictionary with analysis results:
                - success: Whether analysis completed successfully
                - issues: List of detected issues
                - metrics: Code quality metrics
                - suggestions: Suggested improvements
                - error: Error message (if any)
        """
        if not self.enable_analyzers:
            return {
                'success': True,
                'issues': [],
                'metrics': {},
                'suggestions': [],
                'error': ''
            }
        
        # Normalize language name
        language = language.lower()
        
        # Select analyzer based on language
        if language in ('python', 'py'):
            return self._analyze_python(code, filename)
        elif language in ('javascript', 'js'):
            return self._analyze_javascript(code, filename)
        elif language in ('typescript', 'ts'):
            return self._analyze_typescript(code, filename)
        else:
            # Basic analysis for other languages
            return self._basic_analysis(code, language)
    
    def _analyze_python(
        self,
        code: str,
        filename: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Analyze Python code using static analysis tools.
        
        Args:
            code: Python code to analyze
            filename: Optional filename for context
            
        Returns:
            Dictionary with analysis results
        """
        results = {
            'success': True,
            'issues': [],
            'metrics': {},
            'suggestions': [],
            'error': ''
        }
        
        # Use external analyzers if available
        external_results = self._run_external_python_analyzers(code, filename)
        if external_results['success']:
            # Merge external analysis with results
            results['issues'].extend(external_results['issues'])
            results['metrics'].update(external_results['metrics'])
            results['suggestions'].extend(external_results['suggestions'])
        
        # Always run basic Python analysis
        basic_results = self._basic_python_analysis(code)
        if basic_results['success']:
            # Merge basic analysis with results
            results['issues'].extend(basic_results['issues'])
            results['metrics'].update(basic_results['metrics'])
            results['suggestions'].extend(basic_results['suggestions'])
        else:
            # If basic analysis failed but external succeeded, still consider overall success
            if not external_results['success']:
                results['success'] = False
                results['error'] = f"Analysis failed: {basic_results['error']}"
        
        return results
    
    def _run_external_python_analyzers(
        self,
        code: str,
        filename: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Run external Python analyzers like pylint, flake8, etc.
        
        Args:
            code: Python code to analyze
            filename: Optional filename for context
            
        Returns:
            Dictionary with analysis results
        """
        results = {
            'success': True,
            'issues': [],
            'metrics': {},
            'suggestions': [],
            'error': ''
        }
        
        # Create a temporary file for analysis
        temp_file = None
        try:
            with tempfile.NamedTemporaryFile(suffix='.py', mode='w+', delete=False) as f:
                temp_file = f.name
                f.write(code)
            
            # Run pylint if available
            if self._check_external_analyzer('pylint'):
                pylint_results = self._run_pylint(temp_file)
                if pylint_results['success']:
                    results['issues'].extend(pylint_results['issues'])
                    results['metrics'].update(pylint_results['metrics'])
                    results['suggestions'].extend(pylint_results['suggestions'])
            
            # Run flake8 if available
            if self._check_external_analyzer('flake8'):
                flake8_results = self._run_flake8(temp_file)
                if flake8_results['success']:
                    results['issues'].extend(flake8_results['issues'])
            
            # Run bandit if available (security checks)
            if self._check_external_analyzer('bandit'):
                bandit_results = self._run_bandit(temp_file)
                if bandit_results['success']:
                    results['issues'].extend(bandit_results['issues'])
            
            # Run mypy if available (type checking)
            if self._check_external_analyzer('mypy'):
                mypy_results = self._run_mypy(temp_file)
                if mypy_results['success']:
                    results['issues'].extend(mypy_results['issues'])
            
        except Exception as e:
            logger.error(f"Error during external Python analysis: {str(e)}")
            results['success'] = False
            results['error'] = f"Error during external Python analysis: {str(e)}"
        finally:
            # Clean up temporary file
            if temp_file and os.path.exists(temp_file):
                os.unlink(temp_file)
        
        return results
    
    def _run_pylint(self, file_path: str) -> Dict[str, Any]:
        """
        Run pylint on a Python file.
        
        Args:
            file_path: Path to the Python file
            
        Returns:
            Dictionary with pylint results
        """
        try:
            # Run pylint with JSON reporter
            result = subprocess.run(
                ['pylint', '--output-format=json', file_path],
                capture_output=True,
                text=True
            )
            
            issues = []
            metrics = {'score': 10.0}  # Default score (perfect)
            suggestions = []
            
            # Parse pylint output
            if result.stdout:
                try:
                    pylint_json = json.loads(result.stdout)
                    
                    # Extract issues
                    for item in pylint_json:
                        issue = {
                            'line': item.get('line', 0),
                            'column': item.get('column', 0),
                            'message': item.get('message', ''),
                            'message-id': item.get('message-id', ''),
                            'symbol': item.get('symbol', ''),
                            'severity': item.get('type', 'warning')
                        }
                        issues.append(issue)
                        
                        # Add suggestion for fixable issues
                        if item.get('symbol') in ['unused-import', 'trailing-whitespace', 'missing-docstring']:
                            suggestions.append({
                                'line': item.get('line', 0),
                                'message': f"Fix: {item.get('message', '')}",
                                'fix': self._get_pylint_fix(item)
                            })
                    
                except json.JSONDecodeError:
                    logger.warning("Failed to parse pylint JSON output")
            
            # Extract score from stderr (it's not in the JSON output)
            if result.stderr:
                score_match = re.search(r'Your code has been rated at (-?\d+\.\d+)/10', result.stderr)
                if score_match:
                    metrics['score'] = float(score_match.group(1))
            
            return {
                'success': True,
                'issues': issues,
                'metrics': metrics,
                'suggestions': suggestions
            }
            
        except Exception as e:
            logger.error(f"Error running pylint: {str(e)}")
            return {
                'success': False,
                'issues': [],
                'metrics': {},
                'suggestions': [],
                'error': f"Error running pylint: {str(e)}"
            }
    
    def _get_pylint_fix(self, pylint_issue: Dict[str, Any]) -> str:
        """
        Generate a fix suggestion for a pylint issue.
        
        Args:
            pylint_issue: Pylint issue dictionary
            
        Returns:
            Suggested fix as a string
        """
        symbol = pylint_issue.get('symbol', '')
        
        if symbol == 'unused-import':
            return "Remove the unused import"
        elif symbol == 'trailing-whitespace':
            return "Remove trailing whitespace"
        elif symbol == 'missing-docstring':
            return "Add a docstring describing the purpose of this element"
        else:
            return "Review and address the issue according to pylint guidelines"
    
    def _run_flake8(self, file_path: str) -> Dict[str, Any]:
        """
        Run flake8 on a Python file.
        
        Args:
            file_path: Path to the Python file
            
        Returns:
            Dictionary with flake8 results
        """
        try:
            # Run flake8
            result = subprocess.run(
                ['flake8', file_path],
                capture_output=True,
                text=True
            )
            
            issues = []
            
            # Parse flake8 output
            # Format: filename:line:column: error_code error_message
            if result.stdout:
                for line in result.stdout.splitlines():
                    match = re.match(r'.*:(\d+):(\d+): (\w+) (.*)', line)
                    if match:
                        line_num, col, code, message = match.groups()
                        issues.append({
                            'line': int(line_num),
                            'column': int(col),
                            'code': code,
                            'message': message,
                            'severity': 'convention' if code.startswith('E') else 'warning'
                        })
            
            return {
                'success': True,
                'issues': issues
            }
            
        except Exception as e:
            logger.error(f"Error running flake8: {str(e)}")
            return {
                'success': False,
                'issues': [],
                'error': f"Error running flake8: {str(e)}"
            }
    
    def _run_bandit(self, file_path: str) -> Dict[str, Any]:
        """
        Run bandit on a Python file for security checks.
        
        Args:
            file_path: Path to the Python file
            
        Returns:
            Dictionary with bandit results
        """
        try:
            # Run bandit with JSON formatter
            result = subprocess.run(
                ['bandit', '-f', 'json', file_path],
                capture_output=True,
                text=True
            )
            
            issues = []
            
            # Parse bandit output
            if result.stdout:
                try:
                    bandit_data = json.loads(result.stdout)
                    results = bandit_data.get('results', [])
                    
                    for item in results:
                        issues.append({
                            'line': item.get('line_number', 0),
                            'message': item.get('issue_text', ''),
                            'severity': item.get('issue_severity', 'medium').lower(),
                            'confidence': item.get('issue_confidence', ''),
                            'code': item.get('test_id', '')
                        })
                        
                except json.JSONDecodeError:
                    logger.warning("Failed to parse bandit JSON output")
            
            return {
                'success': True,
                'issues': issues
            }
            
        except Exception as e:
            logger.error(f"Error running bandit: {str(e)}")
            return {
                'success': False,
                'issues': [],
                'error': f"Error running bandit: {str(e)}"
            }
    
    def _run_mypy(self, file_path: str) -> Dict[str, Any]:
        """
        Run mypy on a Python file for type checking.
        
        Args:
            file_path: Path to the Python file
            
        Returns:
            Dictionary with mypy results
        """
        try:
            # Run mypy
            result = subprocess.run(
                ['mypy', file_path],
                capture_output=True,
                text=True
            )
            
            issues = []
            
            # Parse mypy output
            # Format: file:line: error: message
            if result.stdout:
                for line in result.stdout.splitlines():
                    match = re.match(r'.*:(\d+): (\w+): (.*)', line)
                    if match:
                        line_num, severity, message = match.groups()
                        issues.append({
                            'line': int(line_num),
                            'message': message,
                            'severity': severity.lower()
                        })
            
            return {
                'success': True,
                'issues': issues
            }
            
        except Exception as e:
            logger.error(f"Error running mypy: {str(e)}")
            return {
                'success': False,
                'issues': [],
                'error': f"Error running mypy: {str(e)}"
            }
    
    def _basic_python_analysis(self, code: str) -> Dict[str, Any]:
        """
        Perform basic Python code analysis using the ast module.
        
        Args:
            code: Python code to analyze
            
        Returns:
            Dictionary with analysis results
        """
        results = {
            'success': True,
            'issues': [],
            'metrics': {},
            'suggestions': [],
            'error': ''
        }
        
        try:
            # Parse the code to an AST
            tree = ast.parse(code)
            
            # Collect metrics
            metrics = {
                'line_count': len(code.splitlines()),
                'function_count': 0,
                'class_count': 0,
                'import_count': 0,
                'complexity': {}
            }
            
            # Track used and imported names
            imported_names = set()
            used_names = set()
            
            # Visitor for basic analysis
            class BasicVisitor(ast.NodeVisitor):
                def visit_FunctionDef(self, node):
                    metrics['function_count'] += 1
                    
                    # Calculate cyclomatic complexity
                    complexity = self._calculate_complexity(node)
                    metrics['complexity'][node.name] = complexity
                    
                    # Check for missing docstring
                    if not ast.get_docstring(node):
                        results['issues'].append({
                            'line': node.lineno,
                            'message': f"Function '{node.name}' is missing a docstring",
                            'severity': 'convention'
                        })
                    
                    self.generic_visit(node)
                
                def visit_ClassDef(self, node):
                    metrics['class_count'] += 1
                    
                    # Check for missing docstring
                    if not ast.get_docstring(node):
                        results['issues'].append({
                            'line': node.lineno,
                            'message': f"Class '{node.name}' is missing a docstring",
                            'severity': 'convention'
                        })
                    
                    self.generic_visit(node)
                
                def visit_Import(self, node):
                    metrics['import_count'] += len(node.names)
                    for alias in node.names:
                        imported_names.add(alias.name)
                    self.generic_visit(node)
                
                def visit_ImportFrom(self, node):
                    metrics['import_count'] += len(node.names)
                    for alias in node.names:
                        if node.module:
                            imported_names.add(f"{node.module}.{alias.name}")
                        else:
                            imported_names.add(alias.name)
                    self.generic_visit(node)
                
                def visit_Name(self, node):
                    if isinstance(node.ctx, ast.Load):
                        used_names.add(node.id)
                    self.generic_visit(node)
                
                def _calculate_complexity(self, node):
                    """Calculate cyclomatic complexity."""
                    complexity = 1  # Base complexity
                    
                    class ComplexityVisitor(ast.NodeVisitor):
                        def __init__(self):
                            self.complexity = 0
                        
                        def visit_If(self, node):
                            self.complexity += 1
                            self.generic_visit(node)
                        
                        def visit_For(self, node):
                            self.complexity += 1
                            self.generic_visit(node)
                        
                        def visit_While(self, node):
                            self.complexity += 1
                            self.generic_visit(node)
                        
                        def visit_Try(self, node):
                            self.complexity += len(node.handlers)
                            self.generic_visit(node)
                        
                        def visit_BoolOp(self, node):
                            if isinstance(node.op, ast.And) or isinstance(node.op, ast.Or):
                                self.complexity += len(node.values) - 1
                            self.generic_visit(node)
                    
                    visitor = ComplexityVisitor()
                    visitor.visit(node)
                    
                    return complexity + visitor.complexity
            
            # Run the visitor
            visitor = BasicVisitor()
            visitor.visit(tree)
            
            # Find unused imports
            for name in imported_names:
                base_name = name.split('.')[0]
                if base_name not in used_names and name not in used_names:
                    # Try to find the import statement for this name
                    for node in ast.walk(tree):
                        if isinstance(node, (ast.Import, ast.ImportFrom)):
                            for alias in node.names:
                                if alias.name == name or alias.name == base_name:
                                    results['issues'].append({
                                        'line': node.lineno,
                                        'message': f"Unused import: {name}",
                                        'severity': 'warning'
                                    })
                                    
                                    results['suggestions'].append({
                                        'line': node.lineno,
                                        'message': f"Remove unused import: {name}",
                                        'fix': f"Remove the import for '{name}'"
                                    })
            
            # Check for high complexity functions
            for func_name, complexity in metrics['complexity'].items():
                if complexity > 10:
                    # Find the function node
                    for node in ast.walk(tree):
                        if isinstance(node, ast.FunctionDef) and node.name == func_name:
                            results['issues'].append({
                                'line': node.lineno,
                                'message': f"Function '{func_name}' has high cyclomatic complexity ({complexity})",